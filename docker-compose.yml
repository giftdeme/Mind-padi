services:
  ms:
    build: ./server
    container_name: ms
    restart: always
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./server:/ms/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SERVER_PORT}" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:17.3-alpine3.21
    container_name: postgres
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "$POSTGRES_USER", "-d", "$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.2-alpine3.21
    container_name: redis
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
  redis-data:
